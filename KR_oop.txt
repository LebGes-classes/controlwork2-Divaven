Variant 3
1. Абстрактный класс - это тот который содержит абстрактные методы кот. должны быть реализованы в его подклассах.
   но иожет содержать и обычные методы с реализацией. испльзуются для предоставления общего функционала.
		Абстрактный класс:
Может содержать как абстрактные методы (без реализации), так и обычные методы с реализацией.
Может иметь поля (переменные класса).
Один класс может наследоваться только от одного абстрактного класса.
	Интерфейс:
Может содержать только абстрактные методы и константы (переменные, которые автоматически считаются public, static, и final).
Не может содержать обычные методы с реализацией, но можно включать методы с реализацией (default methods и static methods).
Не может иметь полей.
Класс может реализовывать несколько интерфейсов.

2. Интерфйс опр только абстрактные методы без реализации, а абстр класс может еще сод методы с реализацией
   Интерфейс исп только для реализации набора методов, а абстр класс - когда нужна общая функциональность

3. В отличие от наследования, где класс расширяет другой класс, при композиции классы просто содержат друг друга.
   Композиция это создание объектов одного класса в другом классе и использование их функционала. дин объект состоит из других объектов. композиция может
   использоваться когда один объект яв частью другого или имеет связь с другим объектом.
   Это означает, что один класс состоит из объектов другого класса, и объекты внутреннего класса используются для предоставления функциональности внешнему классу. 

4. 1. Статический полиморфизм:
    Реализуется с помощью перегрузки методов (overloading).
    Решение о том, какой метод вызывать, принимается на этапе компиляции.
    При перегрузке методов в одном классе или интерфейсе можно иметь несколько методов с одним и тем же именем, но разными параметрами.
   2. Динамический (время выполнения) полиморфизм:
    Реализуется с использованием наследования и переопределения методов (overriding).
    Решение о том, какой метод вызывать, принимается во время выполнения программы.
    В Java динамический полиморфизм достигается через использование ключевого слова override при переопределении метода в подклассе.

5. Ключевое слово super используется для обращения к родительскому классу внутри подкласса. Оно может быть использовано для вызова конструктора родительского класса, 
   доступа к методам и переменным родительского класса. Например, super() используется для вызова конструктора родительского класса, а super.метод() - для вызова метода 
   родительского класса.
   1 Обращение к членам родительского класса
   2 Вызов конструктора родительского класса